1.链接传参乱码问题
解决特殊字符转码：前encodeURIComponent(JSON.stringify(item.ci_id))后 JSON.parse(decodeURIComponent(
        JSON.stringify(oo).replace(/%5C/g,'%5C%5C')
                            .replace(/%22/g,"%5C%22")
                            .replace(/%2F/g,'%5C%2F')
                            .replace(/%08/g,'%5Cb')
                            .replace(/%0C/g,'%5Cf')
                            .replace(/%0A/g,'%5Cn')
                            .replace(/%0D/g,'%5Cr')
                            .replace(/%09/g,'%5Ct')))
2.页面跳转ios不能跳转
 解决模拟a标签跳转：
      <a href="#" id='links' style='display:none;'></a>
      var obj = document.getElementById('links');
      obj.href = "index.html";
      obj.click();
3.vue当渲染层次太多
  解决需要手动重新执行：
  用 this.$forceUpdate();
4.用 axios请求后this指向问题
5.二维码生成用插件jqery.qrcose.min.js
  转换图片保存：
     var qrcode=$('#dimension').qrcode({
          render   : "canvas",
          typeNumber  : -1,
          width: $('#dimension').width(),
          height:  $('#dimension').height(),
          text: response.data.rows.serial    //需要生成的数据
        })
       
      var canvas=qrcode.find('canvas').get(0);
      $('#imgOne').attr('src',canvas.toDataURL('image/jpg'))//转换成图片
6.获取浏览器信息：
 weixin:function(){
    var browser = {
    versions: function () {
        var u = navigator.userAgent, app = navigator.appVersion;
        return {         //移动终端浏览器版本信息
            trident: u.indexOf('Trident') > -1, //IE内核
            presto: u.indexOf('Presto') > -1, //opera内核
            webKit: u.indexOf('AppleWebKit') > -1, //苹果、谷歌内核
            gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1, //火狐内核
            mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端
            ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端
            android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //android终端或uc浏览器
            iPhone: u.indexOf('iPhone') > -1, //是否为iPhone或者QQHD浏览器
            iPad: u.indexOf('iPad') > -1, //是否iPad
            webApp: u.indexOf('Safari') == -1 //是否web应该程序，没有头部与底部
        };
    }(),
    language: (navigator.browserLanguage || navigator.language).toLowerCase()
}

if (browser.versions.mobile) {//判断是否是移动设备打开。browser代码在下面
        var ua = navigator.userAgent.toLowerCase();//获取判断用的对象
        if (ua.match(/MicroMessenger/i) == "micromessenger") {
          this.wxin=true;
                //在微信中打开
                console.log("在微信中打开")
        }
        if (ua.match(/WeiBo/i) == "weibo") {
                //在新浪微博客户端打开
                console.log("在新浪微博客户端打开")
        }
        if (ua.match(/QQ/i) == "qq") {
                //在QQ空间打开
                console.log("在QQ空间打开")
        }
        if (browser.versions.ios) {
                //是否在IOS浏览器打开
                console.log("是否在IOS浏览器打开")
        } 
        if(browser.versions.android){
                //是否在安卓浏览器打开
                console.log("是否在安卓浏览器打开")
        }
} else {
        //否则就是PC浏览器打开
        console.log("否则就是PC浏览器打开")
}
7.vue用iframe获取父级参数：
      //windo下父级是app（创建实例的vue）的属性是shows
     window.parent.app.shows= false;
8.跨越问题：
  最方便方法谷歌设置浏览器跨越
  版本号49之后的chrome跨域设置不支持目标属性直接--disable-web-security
  需要用cmd cd进入目录然后执行：
  chrome.exe --disable-web-security --user-agent="Android" --user-data-dir="C:/temp-chrome-eng
  9.vue 引用其他实例方法的时候，要采取渲染延迟
 10.vue 渲染出现闪烁问题
    
<div id="app" v-cloak>
    {{ message }}
</div>
[v-cloak] {
	display: none !important;
}
    